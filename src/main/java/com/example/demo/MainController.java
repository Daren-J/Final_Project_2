package com.example.demo;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;

@Controller	// This means that this class is a Controller
// @RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class MainController {

	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    
    @Autowired
    private picURLRepository picURLRepository;

    @Value("${accesskey}")
    String accesskey;
    @Value("${secretkey}")
    String secretkey;
    @Value("${bucketName}")
    String bucketName;
    String username;
    String userProfilePic;

	// http://localhost:8080/users/add
	@RequestMapping(path="/add") // Map ONLY POST Requests
	public ModelAndView addNewUser (
		@RequestParam String loginname, @RequestParam String pword) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
        
        ModelAndView returnPage = new ModelAndView();

        try {
            if(userRepository.findByName(loginname).getName() != null){
                returnPage.setViewName("registration"); 
            }
        } catch (Exception e) {
            User n = new User();
            picURL url = new picURL();
            url.setName(loginname);
            n.setName(loginname);
            username = loginname;
            n.setPassword(pword);
            userRepository.save(n);
            picURLRepository.save(url);
		    returnPage.setViewName("editProfile");
        }
        return returnPage;
    }
    
    @GetMapping(path="/registration")
	public ModelAndView signup(){
		return new ModelAndView("registration");
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	@GetMapping(path="/user")
	public @ResponseBody Optional<User> getOneUser(@RequestParam Integer id) {
		// This returns a JSON or XML with the users
		return userRepository.findById(id);
		
	}

	@GetMapping(path="/userByName")
	public @ResponseBody User getOneUserByName(@RequestParam String name) {
        return userRepository.findByName(name);
        
    }

    @GetMapping(path="/userByUrl")
	public @ResponseBody picURL getOneUrl(@RequestParam String url) {
        System.out.println(picURLRepository.findByName(url));
		return picURLRepository.findByName(url);
    }
    
	@GetMapping(path="/addUser")
	public ModelAndView showPage(){
		return new ModelAndView("signupForm");
	}

	


    
    // @GetMapping("/")
    // public String home(){
    //     return "home";
    // }

    @GetMapping("/login")
    public String login(){
        return "login";
    }


    @GetMapping("/editProfile")
    public ModelAndView renderUploadPage() {
        //System.out.println(accesskey  + bucketName + secretkey);
        return new ModelAndView("editProfile");
    }

    // @GetMapping("/")
    // public ModelAndView home() {
    //     //System.out.println(accesskey  + bucketName + secretkey);
    //     return new ModelAndView("home");
    // }

    @GetMapping("/")
    public ModelAndView homeinfo() {
        ModelAndView returnPage = new ModelAndView();
        returnPage.setViewName("home");
        try {
            User user = userRepository.findByName(username);
            returnPage.addObject("Name", user.getName());
            returnPage.addObject("bio", user.getBio());
            picURL userpic = picURLRepository.findByName(username);
            returnPage.addObject("userProfilePic", userpic.getUrl());
        } catch (Exception e) {
            returnPage.addObject("bio", "To add a bio and a pic, login in or register");
            returnPage.addObject("userProfilePic", "https://fall20finalproject.s3.amazonaws.com/junkimmigration.jpg");
            returnPage.addObject("Name", "Guest");
        }
       
        return returnPage;
    }

    @PostMapping(value = "/success")
    public ModelAndView uploads3(@RequestParam("photo") MultipartFile image, @RequestParam(name = "desc") String desc, @RequestParam String bio) {
        ModelAndView returnPage = new ModelAndView();
        System.out.println("description      " + desc);
        System.out.println(image.getOriginalFilename());
    
        BasicAWSCredentials cred = new BasicAWSCredentials(accesskey, secretkey);
        // AmazonS3Client client=AmazonS3ClientBuilder.standard().withCredentials(new
        // AWSCredentialsProvider(cred)).with
        AmazonS3 client = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(cred))
                .withRegion(Regions.US_EAST_1).build();
        try {
            PutObjectRequest put = new PutObjectRequest(bucketName, image.getOriginalFilename(),
                    image.getInputStream(), new ObjectMetadata()).withCannedAcl(CannedAccessControlList.PublicRead);
            client.putObject(put);

            String imgSrc = "http://" + bucketName + ".s3.amazonaws.com/" + image.getOriginalFilename();
            userProfilePic = imgSrc;

            // returnPage.setViewName("showImage");
            // returnPage.addObject("name", desc)

            //add url to the db here?
            
            returnPage.setViewName("successlogin");
            picURL currentURL = picURLRepository.findByName(username);
            currentURL.setUrl(imgSrc);
            picURLRepository.save(currentURL);

            // //Add the bio to the database

            User user = userRepository.findByName(username);
            user.setBio(bio);
            userRepository.save(user);
            returnPage.addObject("bio", user.getBio());
            returnPage.addObject("Name", user.getName());

            // returnPage.setViewName("home");
            // returnPage.addObject("imgSrc", imgSrc);



            //Save this in the DB. 
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            returnPage.setViewName("error");
        }
        return returnPage;

    }

    @PostMapping("/editProfile")
    public ModelAndView saveUser(@RequestParam String loginname, @RequestParam String pword) {
        ModelAndView returnPage = new ModelAndView();
        User user = userRepository.findByName(loginname);
        String name = user.getName();
        String password = user.getPassword();
        
        if(password.equals(pword) && name.equals(loginname)){
            returnPage.setViewName("home");
            returnPage.addObject("bio", user.getBio());
            returnPage.addObject("Name", user.getName());
            picURL pic = picURLRepository.findByName(loginname);
            returnPage.addObject("userProfilePic", pic.getUrl());
            username = name;
            return returnPage;
        }
            
        returnPage.setViewName("login");
        return returnPage;
    }
}
